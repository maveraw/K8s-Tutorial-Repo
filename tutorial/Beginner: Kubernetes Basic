# Kubernetes Basics: A Beginner's Guide

## 📌 Introduction to Kubernetes

### 🔹 What is Kubernetes?
Kubernetes is an open-source container orchestration platform designed to automate the deployment, scaling, and management of containerized applications. It allows developers to efficiently manage containerized workloads across multiple hosts.

### 🔹 Why Use Kubernetes?
- 🚀 **Scalability**: Easily scale applications up or down.
- 💡 **High Availability**: Ensures applications remain available even in case of failures.
- ⚙️ **Automation**: Automates deployment, updates, and rollbacks.
- 📊 **Resource Efficiency**: Optimizes resource utilization across clusters.
- 🔄 **Portability**: Run applications consistently across different environments.

### 🔹 Key Kubernetes Components
- **Pods** 🛠️: The smallest deployable unit that can contain one or multiple containers.
- **Nodes** 📌: Machines (physical or virtual) where Kubernetes workloads run.
- **Deployments** 🚀: Manage and automate the deployment of applications.
- **Services** 🌐: Define how applications communicate internally and externally.
- **ConfigMaps & Secrets** 🔑: Store configuration data separately from application code.

### 🏗️ Hands-on: Running a Basic Pod
1. Create a pod definition file `pod.yaml`:
    ```yaml
    apiVersion: v1
    kind: Pod
    metadata:
      name: my-pod
    spec:
      containers:
      - name: nginx-container
        image: nginx
    ```
2. Apply the file to Kubernetes:
    ```sh
    kubectl apply -f pod.yaml
    ```
3. Check the pod status:
    ```sh
    kubectl get pods
    ```

---

## ⚙️ Setting Up a Kubernetes Cluster (Local & Cloud)

### 🏠 Setting Up Kubernetes Using Minikube
1. Install Minikube:
    ```sh
    curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
    sudo install minikube-linux-amd64 /usr/local/bin/minikube
    ```
2. Start Minikube:
    ```sh
    minikube start
    ```
3. Verify the cluster:
    ```sh
    kubectl cluster-info
    ```

### 🏢 Setting Up a Multi-Node Cluster with Kubeadm
1. Install Kubernetes tools:
    ```sh
    sudo apt update && sudo apt install -y kubeadm kubelet kubectl
    ```
2. Initialize the cluster:
    ```sh
    sudo kubeadm init
    ```
3. Join worker nodes (get the join command from master node output):
    ```sh
    sudo kubeadm join <master-ip>:6443 --token <token> --discovery-token-ca-cert-hash sha256:<hash>
    ```

### ☁️ Running Kubernetes on Cloud Providers
- **AWS EKS**: 
  ```sh
  eksctl create cluster --name my-cluster
  ```
- **Google GKE**: 
  ```sh
  gcloud container clusters create my-cluster
  ```
- **Azure AKS**: 
  ```sh
  az aks create --resource-group myResourceGroup --name myAKSCluster
  ```

---

## 🔗 Kubernetes Networking & Pod Communication

### 📡 Cluster Networking Basics
Kubernetes uses a flat network model where all pods can communicate with each other by default. This is achieved using CNI (Container Network Interface) plugins such as Calico, Flannel, or Cilium.

### 📦 Installing Calico for Networking
1. Install Calico:
    ```sh
    kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml
    ```
2. Verify that Calico is running:
    ```sh
    kubectl get pods -n kube-system | grep calico
    ```

### 🌍 Exposing Applications with Services
- **ClusterIP** 🔹 (default): Internal-only service.
- **NodePort** 🔸: Exposes service on each node's IP and static port.
- **LoadBalancer** 🔻: Integrates with cloud provider's load balancer.
- **Ingress** 🔺: Manages external access via HTTP/HTTPS.

### 🚀 Hands-on: Deploying an Nginx Web Server with a Service
1. Deploy Nginx:
    ```yaml
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: nginx-deployment
    spec:
      replicas: 2
      selector:
        matchLabels:
          app: nginx
      template:
        metadata:
          labels:
            app: nginx
        spec:
          containers:
          - name: nginx
            image: nginx:latest
    ```
    ```sh
    kubectl apply -f nginx-deployment.yaml
    ```
2. Create a Service:
    ```yaml
    apiVersion: v1
    kind: Service
    metadata:
      name: nginx-service
    spec:
      selector:
        app: nginx
      ports:
      - protocol: TCP
        port: 80
        targetPort: 80
      type: NodePort
    ```
    ```sh
    kubectl apply -f nginx-service.yaml
    ```
3. Get the NodePort and access the application:
    ```sh
    kubectl get svc nginx-service
    ```

---

📌 This tutorial provides the fundamental knowledge required to get started with Kubernetes. Feel free to contribute and enhance it! 🚀

